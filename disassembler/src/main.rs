use std::env;
use std::fs::File;
use std::io;
use std::io::Write;

use core::concat_u16;

pub struct Disassembler {
    data: Vec<u8>,
    used_bytes: Vec<u8>,
    position: usize,
}

impl Disassembler {
    pub fn new(data: &[u8]) -> Self {
        Self { data: Vec::from(data), used_bytes: Vec::new(), position: 0 }
    }

    pub fn disassemble(&mut self, mut out: impl Write) -> io::Result<()> {
        macro_rules! instr {
            ($name:expr) => { ($name, vec![]) };
            ($name:expr, $( $p:expr ),+ $(,)?) => {
                ($name, vec![$(
                    match $p {
                        "(**)" => format!("(#{:04X})", self.next_u16()),
                        "**" => format!("#{:04X}", self.next_u16()),
                        "(*)" => format!("(#{:02X})", self.next()),
                        "*" => format!("#{:02X}", self.next()),
                        "(ix+*)" => format!("(ix+#{:02X})", self.next()),
                        _ => String::from($p)
                    }
                ),+])
            };
        }
        self.position = 0;

        while self.position < self.data.len() {
            let adr = self.position;
            let opcode = self.next();

            let (mnemonic, params) = match opcode {
                0x00 => instr!("nop"),
                0x01 => instr!("ld", "bc", "**"),
                0x02 => instr!("ld", "(bc)", "a"),
                0x03 => instr!("inc", "bc"),
                0x04 => instr!("inc", "b"),
                0x05 => instr!("dec", "b"),
                0x06 => instr!("ld", "b", "*"),
                0x07 => instr!("rlca"),
                0x08 => instr!("ex", "af", "af'"),
                0x09 => instr!("add", "hl", "bc"),
                0x0A => instr!("ld", "a", "(bc)"),
                0x0B => instr!("dec", "bc"),
                0x0C => instr!("inc", "c"),
                0x0D => instr!("dec", "c"),
                0x0E => instr!("ld", "c", "*"),
                0x0F => instr!("rrca"),

                0x10 => instr!("djnz", "*"),
                0x11 => instr!("ld", "de", "**"),
                0x12 => instr!("ld", "(de)", "a"),
                0x13 => instr!("inc", "de"),
                0x14 => instr!("inc", "d"),
                0x15 => instr!("dec", "d"),
                0x16 => instr!("ld", "d", "*"),
                0x17 => instr!("rla"),
                0x18 => instr!("jr", "*"),
                0x19 => instr!("add", "hl", "de"),
                0x1A => instr!("ld", "a", "(de)"),
                0x1B => instr!("dec", "de"),
                0x1C => instr!("inc", "e"),
                0x1D => instr!("dec", "e"),
                0x1E => instr!("ld", "e", "*"),
                0x1F => instr!("rra"),

                0x20 => instr!("jr", "nz", "*"),
                0x21 => instr!("ld", "hl", "**"),
                0x22 => instr!("ld", "(**)", "hl"),
                0x23 => instr!("inc", "hl"),
                0x24 => instr!("inc", "h"),
                0x25 => instr!("dec", "h"),
                0x26 => instr!("ld", "h", "*"),
                0x27 => instr!("daa"),
                0x28 => instr!("jr", "z", "*"),
                0x29 => instr!("add", "hl", "hl"),
                0x2A => instr!("ld", "hl", "(**)"),
                0x2B => instr!("dec", "hl"),
                0x2C => instr!("inc", "l"),
                0x2D => instr!("dec", "l"),
                0x2E => instr!("ld", "l", "*"),
                0x2F => instr!("cpl"),

                0x30 => instr!("jr", "nc", "*"),
                0x31 => instr!("ld", "sp", "**"),
                0x32 => instr!("ld", "(**)", "a"),
                0x33 => instr!("inc", "sp"),
                0x34 => instr!("inc", "(hl)"),
                0x35 => instr!("dec", "(hl)"),
                0x36 => instr!("ld", "(hl)", "*"),
                0x37 => instr!("scf"),
                0x38 => instr!("jr", "c", "*"),
                0x39 => instr!("add", "hl", "sp"),
                0x3A => instr!("ld", "a", "(**)"),
                0x3B => instr!("dec", "sp"),
                0x3C => instr!("inc", "a"),
                0x3D => instr!("dec", "a"),
                0x3E => instr!("ld", "a", "*"),
                0x3F => instr!("ccf"),

                0x40 => instr!("ld", "b", "b"),
                0x41 => instr!("ld", "b", "c"),
                0x42 => instr!("ld", "b", "d"),
                0x43 => instr!("ld", "b", "e"),
                0x44 => instr!("ld", "b", "h"),
                0x45 => instr!("ld", "b", "l"),
                0x46 => instr!("ld", "b", "(hl)"),
                0x47 => instr!("ld", "b", "a"),
                0x48 => instr!("ld", "c", "b"),
                0x49 => instr!("ld", "c", "c"),
                0x4A => instr!("ld", "c", "d"),
                0x4B => instr!("ld", "c", "e"),
                0x4C => instr!("ld", "c", "h"),
                0x4D => instr!("ld", "c", "l"),
                0x4E => instr!("ld", "c", "(hl)"),
                0x4F => instr!("ld", "c", "a"),

                0x50 => instr!("ld", "d", "b"),
                0x51 => instr!("ld", "d", "c"),
                0x52 => instr!("ld", "d", "d"),
                0x53 => instr!("ld", "d", "e"),
                0x54 => instr!("ld", "d", "h"),
                0x55 => instr!("ld", "d", "l"),
                0x56 => instr!("ld", "d", "(hl)"),
                0x57 => instr!("ld", "d", "a"),
                0x58 => instr!("ld", "e", "b"),
                0x59 => instr!("ld", "e", "c"),
                0x5A => instr!("ld", "e", "d"),
                0x5B => instr!("ld", "e", "e"),
                0x5C => instr!("ld", "e", "h"),
                0x5D => instr!("ld", "e", "l"),
                0x5E => instr!("ld", "e", "(hl)"),
                0x5F => instr!("ld", "e", "a"),

                0x60 => instr!("ld", "h", "b"),
                0x61 => instr!("ld", "h", "c"),
                0x62 => instr!("ld", "h", "d"),
                0x63 => instr!("ld", "h", "e"),
                0x64 => instr!("ld", "h", "h"),
                0x65 => instr!("ld", "h", "l"),
                0x66 => instr!("ld", "h", "(hl)"),
                0x67 => instr!("ld", "h", "a"),
                0x68 => instr!("ld", "l", "b"),
                0x69 => instr!("ld", "l", "c"),
                0x6A => instr!("ld", "l", "d"),
                0x6B => instr!("ld", "l", "e"),
                0x6C => instr!("ld", "l", "h"),
                0x6D => instr!("ld", "l", "l"),
                0x6E => instr!("ld", "l", "(hl)"),
                0x6F => instr!("ld", "l", "a"),

                0x70 => instr!("ld", "(hl)", "b"),
                0x71 => instr!("ld", "(hl)", "c"),
                0x72 => instr!("ld", "(hl)", "d"),
                0x73 => instr!("ld", "(hl)", "e"),
                0x74 => instr!("ld", "(hl)", "h"),
                0x75 => instr!("ld", "(hl)", "l"),
                0x76 => instr!("halt"),
                0x77 => instr!("ld", "(hl)", "a"),
                0x78 => instr!("ld", "a", "b"),
                0x79 => instr!("ld", "a", "c"),
                0x7A => instr!("ld", "a", "d"),
                0x7B => instr!("ld", "a", "e"),
                0x7C => instr!("ld", "a", "h"),
                0x7D => instr!("ld", "a", "l"),
                0x7E => instr!("ld", "a", "(hl)"),
                0x7F => instr!("ld", "a", "a"),

                0x80 => instr!("add", "b"),
                0x81 => instr!("add", "c"),
                0x82 => instr!("add", "d"),
                0x83 => instr!("add", "e"),
                0x84 => instr!("add", "h"),
                0x85 => instr!("add", "l"),
                0x86 => instr!("add", "(hl)"),
                0x87 => instr!("add", "a"),
                0x88 => instr!("adc", "b"),
                0x89 => instr!("adc", "c"),
                0x8A => instr!("adc", "d"),
                0x8B => instr!("adc", "e"),
                0x8C => instr!("adc", "h"),
                0x8D => instr!("adc", "l"),
                0x8E => instr!("adc", "(hl)"),
                0x8F => instr!("adc", "a"),

                0x90 => instr!("sub", "b"),
                0x91 => instr!("sub", "c"),
                0x92 => instr!("sub", "d"),
                0x93 => instr!("sub", "e"),
                0x94 => instr!("sub", "h"),
                0x95 => instr!("sub", "l"),
                0x96 => instr!("sub", "(hl)"),
                0x97 => instr!("sub", "a"),
                0x98 => instr!("sbc", "b"),
                0x99 => instr!("sbc", "c"),
                0x9A => instr!("sbc", "d"),
                0x9B => instr!("sbc", "e"),
                0x9C => instr!("sbc", "h"),
                0x9D => instr!("sbc", "l"),
                0x9E => instr!("sbc", "(hl)"),
                0x9F => instr!("sbc", "a"),

                0xA0 => instr!("and", "b"),
                0xA1 => instr!("and", "c"),
                0xA2 => instr!("and", "d"),
                0xA3 => instr!("and", "e"),
                0xA4 => instr!("and", "h"),
                0xA5 => instr!("and", "l"),
                0xA6 => instr!("and", "(hl)"),
                0xA7 => instr!("and", "a"),
                0xA8 => instr!("xor", "b"),
                0xA9 => instr!("xor", "c"),
                0xAA => instr!("xor", "d"),
                0xAB => instr!("xor", "e"),
                0xAC => instr!("xor", "h"),
                0xAD => instr!("xor", "l"),
                0xAE => instr!("xor", "(hl)"),
                0xAF => instr!("xor", "a"),

                0xB0 => instr!("or", "b"),
                0xB1 => instr!("or", "c"),
                0xB2 => instr!("or", "d"),
                0xB3 => instr!("or", "e"),
                0xB4 => instr!("or", "h"),
                0xB5 => instr!("or", "l"),
                0xB6 => instr!("or", "(hl)"),
                0xB7 => instr!("or", "a"),
                0xB8 => instr!("cp", "b"),
                0xB9 => instr!("cp", "c"),
                0xBA => instr!("cp", "d"),
                0xBB => instr!("cp", "e"),
                0xBC => instr!("cp", "h"),
                0xBD => instr!("cp", "l"),
                0xBE => instr!("cp", "(hl)"),
                0xBF => instr!("cp", "a"),

                0xC0 => instr!("ret", "nz"),
                0xC1 => instr!("pop", "bc"),
                0xC2 => instr!("jp", "nz", "**"),
                0xC3 => instr!("jp", "**"),
                0xC4 => instr!("call", "nz", "**"),
                0xC5 => instr!("push", "bc"),
                0xC6 => instr!("add", "a", "*"),
                0xC7 => instr!("rst", "#00"),
                0xC8 => instr!("ret", "z"),
                0xC9 => instr!("ret"),
                0xCA => instr!("jp", "z", "**"),
                0xCB => match self.next() {
                    0x00 => instr!("rlc", "b"),
                    0x01 => instr!("rlc", "c"),
                    0x02 => instr!("rlc", "d"),
                    0x03 => instr!("rlc", "e"),
                    0x04 => instr!("rlc", "h"),
                    0x05 => instr!("rlc", "l"),
                    0x06 => instr!("rlc", "(hl)"),
                    0x07 => instr!("rlc", "a"),
                    0x08 => instr!("rrc", "b"),
                    0x09 => instr!("rrc", "c"),
                    0x0A => instr!("rrc", "d"),
                    0x0B => instr!("rrc", "e"),
                    0x0C => instr!("rrc", "h"),
                    0x0D => instr!("rrc", "l"),
                    0x0E => instr!("rrc", "(hl)"),
                    0x0F => instr!("rrc", "a"),

                    0x10 => instr!("rl", "b"),
                    0x11 => instr!("rl", "c"),
                    0x12 => instr!("rl", "d"),
                    0x13 => instr!("rl", "e"),
                    0x14 => instr!("rl", "h"),
                    0x15 => instr!("rl", "l"),
                    0x16 => instr!("rl", "(hl)"),
                    0x17 => instr!("rl", "a"),
                    0x18 => instr!("rr", "b"),
                    0x19 => instr!("rr", "c"),
                    0x1A => instr!("rr", "d"),
                    0x1B => instr!("rr", "e"),
                    0x1C => instr!("rr", "h"),
                    0x1D => instr!("rr", "l"),
                    0x1E => instr!("rr", "(hl)"),
                    0x1F => instr!("rr", "a"),

                    0x20 => instr!("sla", "b"),
                    0x21 => instr!("sla", "c"),
                    0x22 => instr!("sla", "d"),
                    0x23 => instr!("sla", "e"),
                    0x24 => instr!("sla", "h"),
                    0x25 => instr!("sla", "l"),
                    0x26 => instr!("sla", "(hl)"),
                    0x27 => instr!("sla", "a"),
                    0x28 => instr!("sra", "b"),
                    0x29 => instr!("sra", "c"),
                    0x2A => instr!("sra", "d"),
                    0x2B => instr!("sra", "e"),
                    0x2C => instr!("sra", "h"),
                    0x2D => instr!("sra", "l"),
                    0x2E => instr!("sra", "(hl)"),
                    0x2F => instr!("sra", "a"),

                    0x30 => instr!("!sll", "b"),
                    0x31 => instr!("!sll", "c"),
                    0x32 => instr!("!sll", "d"),
                    0x33 => instr!("!sll", "e"),
                    0x34 => instr!("!sll", "h"),
                    0x35 => instr!("!sll", "l"),
                    0x36 => instr!("!sll", "(hl)"),
                    0x37 => instr!("!sll", "a"),
                    0x38 => instr!("srl", "b"),
                    0x39 => instr!("srl", "c"),
                    0x3A => instr!("srl", "d"),
                    0x3B => instr!("srl", "e"),
                    0x3C => instr!("srl", "h"),
                    0x3D => instr!("srl", "l"),
                    0x3E => instr!("srl", "(hl)"),
                    0x3F => instr!("srl", "a"),

                    0x40 => instr!("bit", "#0", "b"),
                    0x41 => instr!("bit", "#0", "c"),
                    0x42 => instr!("bit", "#0", "d"),
                    0x43 => instr!("bit", "#0", "e"),
                    0x44 => instr!("bit", "#0", "h"),
                    0x45 => instr!("bit", "#0", "l"),
                    0x46 => instr!("bit", "#0", "(hl)"),
                    0x47 => instr!("bit", "#0", "a"),
                    0x48 => instr!("bit", "#1", "b"),
                    0x49 => instr!("bit", "#1", "c"),
                    0x4A => instr!("bit", "#1", "d"),
                    0x4B => instr!("bit", "#1", "e"),
                    0x4C => instr!("bit", "#1", "h"),
                    0x4D => instr!("bit", "#1", "l"),
                    0x4E => instr!("bit", "#1", "(hl)"),
                    0x4F => instr!("bit", "#1", "a"),
                    0x50 => instr!("bit", "#2", "b"),
                    0x51 => instr!("bit", "#2", "c"),
                    0x52 => instr!("bit", "#2", "d"),
                    0x53 => instr!("bit", "#2", "e"),
                    0x54 => instr!("bit", "#2", "h"),
                    0x55 => instr!("bit", "#2", "l"),
                    0x56 => instr!("bit", "#2", "(hl)"),
                    0x57 => instr!("bit", "#2", "a"),
                    0x58 => instr!("bit", "#3", "b"),
                    0x59 => instr!("bit", "#3", "c"),
                    0x5A => instr!("bit", "#3", "d"),
                    0x5B => instr!("bit", "#3", "e"),
                    0x5C => instr!("bit", "#3", "h"),
                    0x5D => instr!("bit", "#3", "l"),
                    0x5E => instr!("bit", "#3", "(hl)"),
                    0x5F => instr!("bit", "#3", "a"),
                    0x60 => instr!("bit", "#4", "b"),
                    0x61 => instr!("bit", "#4", "c"),
                    0x62 => instr!("bit", "#4", "d"),
                    0x63 => instr!("bit", "#4", "e"),
                    0x64 => instr!("bit", "#4", "h"),
                    0x65 => instr!("bit", "#4", "l"),
                    0x66 => instr!("bit", "#4", "(hl)"),
                    0x67 => instr!("bit", "#4", "a"),
                    0x68 => instr!("bit", "#5", "b"),
                    0x69 => instr!("bit", "#5", "c"),
                    0x6A => instr!("bit", "#5", "d"),
                    0x6B => instr!("bit", "#5", "e"),
                    0x6C => instr!("bit", "#5", "h"),
                    0x6D => instr!("bit", "#5", "l"),
                    0x6E => instr!("bit", "#5", "(hl)"),
                    0x6F => instr!("bit", "#5", "a"),
                    0x70 => instr!("bit", "#6", "b"),
                    0x71 => instr!("bit", "#6", "c"),
                    0x72 => instr!("bit", "#6", "d"),
                    0x73 => instr!("bit", "#6", "e"),
                    0x74 => instr!("bit", "#6", "h"),
                    0x75 => instr!("bit", "#6", "l"),
                    0x76 => instr!("bit", "#6", "(hl)"),
                    0x77 => instr!("bit", "#6", "a"),
                    0x78 => instr!("bit", "#7", "b"),
                    0x79 => instr!("bit", "#7", "c"),
                    0x7A => instr!("bit", "#7", "d"),
                    0x7B => instr!("bit", "#7", "e"),
                    0x7C => instr!("bit", "#7", "h"),
                    0x7D => instr!("bit", "#7", "l"),
                    0x7E => instr!("bit", "#7", "(hl)"),
                    0x7F => instr!("bit", "#7", "a"),

                    0x80 => instr!("res", "#0", "b"),
                    0x81 => instr!("res", "#0", "c"),
                    0x82 => instr!("res", "#0", "d"),
                    0x83 => instr!("res", "#0", "e"),
                    0x84 => instr!("res", "#0", "h"),
                    0x85 => instr!("res", "#0", "l"),
                    0x86 => instr!("res", "#0", "(hl)"),
                    0x87 => instr!("res", "#0", "a"),
                    0x88 => instr!("res", "#1", "b"),
                    0x89 => instr!("res", "#1", "c"),
                    0x8A => instr!("res", "#1", "d"),
                    0x8B => instr!("res", "#1", "e"),
                    0x8C => instr!("res", "#1", "h"),
                    0x8D => instr!("res", "#1", "l"),
                    0x8E => instr!("res", "#1", "(hl)"),
                    0x8F => instr!("res", "#1", "a"),
                    0x90 => instr!("res", "#2", "b"),
                    0x91 => instr!("res", "#2", "c"),
                    0x92 => instr!("res", "#2", "d"),
                    0x93 => instr!("res", "#2", "e"),
                    0x94 => instr!("res", "#2", "h"),
                    0x95 => instr!("res", "#2", "l"),
                    0x96 => instr!("res", "#2", "(hl)"),
                    0x97 => instr!("res", "#2", "a"),
                    0x98 => instr!("res", "#3", "b"),
                    0x99 => instr!("res", "#3", "c"),
                    0x9A => instr!("res", "#3", "d"),
                    0x9B => instr!("res", "#3", "e"),
                    0x9C => instr!("res", "#3", "h"),
                    0x9D => instr!("res", "#3", "l"),
                    0x9E => instr!("res", "#3", "(hl)"),
                    0x9F => instr!("res", "#3", "a"),
                    0xA0 => instr!("res", "#4", "b"),
                    0xA1 => instr!("res", "#4", "c"),
                    0xA2 => instr!("res", "#4", "d"),
                    0xA3 => instr!("res", "#4", "e"),
                    0xA4 => instr!("res", "#4", "h"),
                    0xA5 => instr!("res", "#4", "l"),
                    0xA6 => instr!("res", "#4", "(hl)"),
                    0xA7 => instr!("res", "#4", "a"),
                    0xA8 => instr!("res", "#5", "b"),
                    0xA9 => instr!("res", "#5", "c"),
                    0xAA => instr!("res", "#5", "d"),
                    0xAB => instr!("res", "#5", "e"),
                    0xAC => instr!("res", "#5", "h"),
                    0xAD => instr!("res", "#5", "l"),
                    0xAE => instr!("res", "#5", "(hl)"),
                    0xAF => instr!("res", "#5", "a"),
                    0xB0 => instr!("res", "#6", "b"),
                    0xB1 => instr!("res", "#6", "c"),
                    0xB2 => instr!("res", "#6", "d"),
                    0xB3 => instr!("res", "#6", "e"),
                    0xB4 => instr!("res", "#6", "h"),
                    0xB5 => instr!("res", "#6", "l"),
                    0xB6 => instr!("res", "#6", "(hl)"),
                    0xB7 => instr!("res", "#6", "a"),
                    0xB8 => instr!("res", "#7", "b"),
                    0xB9 => instr!("res", "#7", "c"),
                    0xBA => instr!("res", "#7", "d"),
                    0xBB => instr!("res", "#7", "e"),
                    0xBC => instr!("res", "#7", "h"),
                    0xBD => instr!("res", "#7", "l"),
                    0xBE => instr!("res", "#7", "(hl)"),
                    0xBF => instr!("res", "#7", "a"),

                    0xC0 => instr!("set", "#0", "b"),
                    0xC1 => instr!("set", "#0", "c"),
                    0xC2 => instr!("set", "#0", "d"),
                    0xC3 => instr!("set", "#0", "e"),
                    0xC4 => instr!("set", "#0", "h"),
                    0xC5 => instr!("set", "#0", "l"),
                    0xC6 => instr!("set", "#0", "(hl)"),
                    0xC7 => instr!("set", "#0", "a"),
                    0xC8 => instr!("set", "#1", "b"),
                    0xC9 => instr!("set", "#1", "c"),
                    0xCA => instr!("set", "#1", "d"),
                    0xCB => instr!("set", "#1", "e"),
                    0xCC => instr!("set", "#1", "h"),
                    0xCD => instr!("set", "#1", "l"),
                    0xCE => instr!("set", "#1", "(hl)"),
                    0xCF => instr!("set", "#1", "a"),
                    0xD0 => instr!("set", "#2", "b"),
                    0xD1 => instr!("set", "#2", "c"),
                    0xD2 => instr!("set", "#2", "d"),
                    0xD3 => instr!("set", "#2", "e"),
                    0xD4 => instr!("set", "#2", "h"),
                    0xD5 => instr!("set", "#2", "l"),
                    0xD6 => instr!("set", "#2", "(hl)"),
                    0xD7 => instr!("set", "#2", "a"),
                    0xD8 => instr!("set", "#3", "b"),
                    0xD9 => instr!("set", "#3", "c"),
                    0xDA => instr!("set", "#3", "d"),
                    0xDB => instr!("set", "#3", "e"),
                    0xDC => instr!("set", "#3", "h"),
                    0xDD => instr!("set", "#3", "l"),
                    0xDE => instr!("set", "#3", "(hl)"),
                    0xDF => instr!("set", "#3", "a"),
                    0xE0 => instr!("set", "#4", "b"),
                    0xE1 => instr!("set", "#4", "c"),
                    0xE2 => instr!("set", "#4", "d"),
                    0xE3 => instr!("set", "#4", "e"),
                    0xE4 => instr!("set", "#4", "h"),
                    0xE5 => instr!("set", "#4", "l"),
                    0xE6 => instr!("set", "#4", "(hl)"),
                    0xE7 => instr!("set", "#4", "a"),
                    0xE8 => instr!("set", "#5", "b"),
                    0xE9 => instr!("set", "#5", "c"),
                    0xEA => instr!("set", "#5", "d"),
                    0xEB => instr!("set", "#5", "e"),
                    0xEC => instr!("set", "#5", "h"),
                    0xED => instr!("set", "#5", "l"),
                    0xEE => instr!("set", "#5", "(hl)"),
                    0xEF => instr!("set", "#5", "a"),
                    0xF0 => instr!("set", "#6", "b"),
                    0xF1 => instr!("set", "#6", "c"),
                    0xF2 => instr!("set", "#6", "d"),
                    0xF3 => instr!("set", "#6", "e"),
                    0xF4 => instr!("set", "#6", "h"),
                    0xF5 => instr!("set", "#6", "l"),
                    0xF6 => instr!("set", "#6", "(hl)"),
                    0xF7 => instr!("set", "#6", "a"),
                    0xF8 => instr!("set", "#7", "b"),
                    0xF9 => instr!("set", "#7", "c"),
                    0xFA => instr!("set", "#7", "d"),
                    0xFB => instr!("set", "#7", "e"),
                    0xFC => instr!("set", "#7", "h"),
                    0xFD => instr!("set", "#7", "l"),
                    0xFE => instr!("set", "#7", "(hl)"),
                    0xFF => instr!("set", "#7", "a"),
                },
                0xCC => instr!("call", "z", "**"),
                0xCD => instr!("call", "**"),
                0xCE => instr!("adc", "a", "*"),
                0xCF => instr!("rst", "#08"),

                0xD0 => instr!("ret", "nc"),
                0xD1 => instr!("pop", "de"),
                0xD2 => instr!("jp", "nc", "**"),
                0xD3 => instr!("out", "(*)", "a"),
                0xD4 => instr!("call", "nc", "**"),
                0xD5 => instr!("push", "de"),
                0xD6 => instr!("sub", "a", "*"),
                0xD7 => instr!("rst", "#10"),
                0xD8 => instr!("ret", "c"),
                0xD9 => instr!("exx"),
                0xDA => instr!("jp", "c", "**"),
                0xDB => instr!("in", "a", "(*)"),
                0xDC => instr!("call", "c", "**"),
                0xDD => match self.next() {
                    0x09 => instr!("add", "ix", "bc"),
                    0x19 => instr!("add", "ix", "de"),
                    0x29 => instr!("add", "ix", "ix"),
                    0x39 => instr!("add", "ix", "sp"),

                    0x21 => instr!("ld", "ix", "**"),
                    0x22 => instr!("ld", "(**)", "ix"),
                    0x2A => instr!("ld", "ix", "(**)"),

                    0x23 => instr!("inc", "ix"),
                    0x34 => instr!("inc", "(ix+*)"),
                    0x2B => instr!("dec", "ix"),
                    0x35 => instr!("dec", "(ix+*)"),

                    0x36 => instr!("ld", "(ix+*)", "*"),
                    0x46 => instr!("ld", "b", "(ix+*)"),
                    0x4E => instr!("ld", "c", "(ix+*)"),
                    0x56 => instr!("ld", "d", "(ix+*)"),
                    0x5E => instr!("ld", "e", "(ix+*)"),
                    0x66 => instr!("ld", "h", "(ix+*)"),
                    0x6E => instr!("ld", "l", "(ix+*)"),

                    0x70 => instr!("ld", "(ix+*)", "b"),
                    0x71 => instr!("ld", "(ix+*)", "c"),
                    0x72 => instr!("ld", "(ix+*)", "d"),
                    0x73 => instr!("ld", "(ix+*)", "e"),
                    0x74 => instr!("ld", "(ix+*)", "h"),
                    0x75 => instr!("ld", "(ix+*)", "l"),
                    0x77 => instr!("ld", "(ix+*)", "a"),

                    0x86 => instr!("add", "a", "(ix+*)"),
                    0x8E => instr!("adc", "a", "(ix+*)"),
                    0x96 => instr!("sub", "a", "(ix+*)"),
                    0x9E => instr!("sbc", "a", "(ix+*)"),
                    0xA6 => instr!("and", "a", "(ix+*)"),
                    0xAE => instr!("xor", "a", "(ix+*)"),
                    0xB6 => instr!("or", "a", "(ix+*)"),
                    0xBE => instr!("cp", "a", "(ix+*)"),

                    0xCB => match self.next() {
                        0x06 => instr!("rlc", "(ix+*)"),
                        0x0E => instr!("rrc", "(ix+*)"),
                        0x16 => instr!("rl", "(ix+*)"),
                        0x1E => instr!("rr", "(ix+*)"),
                        0x26 => instr!("sla", "(ix+*)"),
                        0x2E => instr!("sra", "(ix+*)"),
                        0x3E => instr!("srl", "(ix+*)"),

                        0x46 => instr!("bit", "#0", "(ix+*)"),
                        0x4E => instr!("bit", "#1", "(ix+*)"),
                        0x56 => instr!("bit", "#2", "(ix+*)"),
                        0x5E => instr!("bit", "#3", "(ix+*)"),
                        0x66 => instr!("bit", "#4", "(ix+*)"),
                        0x6E => instr!("bit", "#5", "(ix+*)"),
                        0x76 => instr!("bit", "#6", "(ix+*)"),
                        0x7E => instr!("bit", "#7", "(ix+*)"),

                        0x86 => instr!("res", "#0", "(ix+*)"),
                        0x8E => instr!("res", "#1", "(ix+*)"),
                        0x96 => instr!("res", "#2", "(ix+*)"),
                        0x9E => instr!("res", "#3", "(ix+*)"),
                        0xA6 => instr!("res", "#4", "(ix+*)"),
                        0xAE => instr!("res", "#5", "(ix+*)"),
                        0xB6 => instr!("res", "#6", "(ix+*)"),
                        0xBE => instr!("res", "#7", "(ix+*)"),

                        0xC6 => instr!("set", "#0", "(ix+*)"),
                        0xCE => instr!("set", "#1", "(ix+*)"),
                        0xD6 => instr!("set", "#2", "(ix+*)"),
                        0xDE => instr!("set", "#3", "(ix+*)"),
                        0xE6 => instr!("set", "#4", "(ix+*)"),
                        0xEE => instr!("set", "#5", "(ix+*)"),
                        0xF6 => instr!("set", "#6", "(ix+*)"),
                        0xFE => instr!("set", "#7", "(ix+*)"),

                        _ => instr!("!!!!"),
                    }

                    0xE1 => instr!("pop", "ix"),
                    0xE3 => instr!("ex", "(sp)", "ix"),
                    0xE5 => instr!("push", "ix"),
                    0xE9 => instr!("jp", "(ix)"),
                    0xF9 => instr!("ld", "sp", "ix"),

                    _ => instr!("????"),
                },
                0xDE => instr!("sbc", "a", "*"),
                0xDF => instr!("rst", "#18"),

                0xE0 => instr!("ret", "po"),
                0xE1 => instr!("pop", "hl"),
                0xE2 => instr!("jp", "po", "**"),
                0xE3 => instr!("ex", "(sp)", "hl"),
                0xE4 => instr!("call", "po", "**"),
                0xE5 => instr!("push", "hl"),
                0xE6 => instr!("and", "a", "*"),
                0xE7 => instr!("rst", "#20"),
                0xE8 => instr!("ret", "pe"),
                0xE9 => instr!("jp", "(hl)"),
                0xEA => instr!("jp", "pe", "**"),
                0xEB => instr!("ex", "de", "hl"),
                0xEC => instr!("call", "pe", "**"),
                0xED => match self.next() {
                    0x40 => instr!("in", "b", "(c)"),
                    0x41 => instr!("out", "(c)", "b"),
                    0x42 => instr!("sbc", "hl", "bc"),
                    0x43 => instr!("ld", "(**)", "bc"),
                    0x44 => instr!("neg"),
                    0x45 => instr!("retn"),
                    0x46 => instr!("im", "#0"),
                    0x47 => instr!("ld", "i", "a"),
                    0x48 => instr!("in", "c", "(c)"),
                    0x49 => instr!("out", "(c)", "c"),
                    0x4A => instr!("adc", "hl", "bc"),
                    0x4B => instr!("ld", "bc", "(**)"),
                    0x4C => instr!("!neg"),
                    0x4D => instr!("reti"),
                    0x4E => instr!("!im", "#0/1"),
                    0x4F => instr!("ld", "r", "a"),

                    0x50 => instr!("in", "d", "(c)"),
                    0x51 => instr!("out", "(c)", "d"),
                    0x52 => instr!("sbc", "hl", "de"),
                    0x53 => instr!("ld", "(**)", "de"),
                    0x54 => instr!("!neg"),
                    0x55 => instr!("retn"),
                    0x56 => instr!("im", "#1"),
                    0x57 => instr!("ld", "a", "i"),
                    0x58 => instr!("in", "e", "(c)"),
                    0x59 => instr!("out", "(c)", "e"),
                    0x5A => instr!("adc", "hl", "de"),
                    0x5B => instr!("ld", "de", "(**)"),
                    0x5C => instr!("!neg"),
                    0x5D => instr!("retn"),
                    0x5E => instr!("im", "#2"),
                    0x5F => instr!("ld", "a", "r"),

                    0x60 => instr!("in", "h", "(c)"),
                    0x61 => instr!("out", "(c)", "h"),
                    0x62 => instr!("sbc", "hl", "hl"),
                    0x63 => instr!("!ld", "(**)", "hl"),
                    0x64 => instr!("!neg"),
                    0x65 => instr!("retn"),
                    0x66 => instr!("im", "#0"),
                    0x67 => instr!("rrd"),
                    0x68 => instr!("in", "l", "(c)"),
                    0x69 => instr!("out", "(c)", "l"),
                    0x6A => instr!("adc", "hl", "hl"),
                    0x6B => instr!("!ld", "hl", "(**)"),
                    0x6C => instr!("!neg"),
                    0x6D => instr!("retn"),
                    0x6E => instr!("!im", "#0/1"),
                    0x6F => instr!("rld"),

                    0x70 => instr!("!in", "(c)"),
                    0x71 => instr!("!out", "(c)", "#00"),
                    0x72 => instr!("sbc", "hl", "sp"),
                    0x73 => instr!("ld", "(**)", "sp"),
                    0x74 => instr!("!neg"),
                    0x75 => instr!("retn"),
                    0x76 => instr!("im", "#1"),
                    0x78 => instr!("in", "a", "(c)"),
                    0x79 => instr!("out", "(c)", "a"),
                    0x7A => instr!("adc", "hl", "sp"),
                    0x7B => instr!("ld", "sp", "(**)"),
                    0x7C => instr!("!neg"),
                    0x7D => instr!("retn"),
                    0x7E => instr!("im", "#2"),

                    0xA0 => instr!("ldi"),
                    0xA1 => instr!("cpi"),
                    0xA2 => instr!("ini"),
                    0xA3 => instr!("outi"),
                    0xA8 => instr!("ldd"),
                    0xA9 => instr!("cpd"),
                    0xAA => instr!("ind"),
                    0xAB => instr!("outd"),

                    0xB0 => instr!("ldir"),
                    0xB1 => instr!("cpir"),
                    0xB2 => instr!("inir"),
                    0xB3 => instr!("outir"),
                    0xB8 => instr!("lddr"),
                    0xB9 => instr!("cpdr"),
                    0xBA => instr!("indr"),
                    0xBB => instr!("outdr"),

                    _ => instr!("????"),
                }
                0xEE => instr!("xor", "a", "*"),
                0xEF => instr!("rst", "#28"),

                0xF0 => instr!("ret", "p"),
                0xF1 => instr!("pop", "af"),
                0xF2 => instr!("jp", "p", "**"),
                0xF3 => instr!("di"),
                0xF4 => instr!("call", "p", "**"),
                0xF5 => instr!("push", "af"),
                0xF6 => instr!("or", "a", "*"),
                0xF7 => instr!("rst", "#30"),
                0xF8 => instr!("ret", "m"),
                0xF9 => instr!("ld", "sp", "hl"),
                0xFA => instr!("jp", "m", "**"),
                0xFB => instr!("ei"),
                0xFC => instr!("call", "m", "**"),
                0xFD => instr!("IY", "*"),
                0xFE => instr!("cp", "a", "*"),
                0xFF => instr!("rst", "#38"),
            };

            let used_bytes: Vec<String> = self.used_bytes.iter().map(|b| format!("{:02X}", b)).collect();
            self.used_bytes.clear();

            writeln!(out, "{:04X} {:012}    {:04}    {}", adr, used_bytes.join(" "), mnemonic, params.join(", "))?;
        }

        Ok(())
    }

    fn next(&mut self) -> u8 {
        let val = self.data.get(self.position).copied().unwrap_or(0);
        self.used_bytes.push(val);
        self.position += 1;
        val
    }

    fn next_u16(&mut self) -> u16 {
        let lo = self.next();
        let hi = self.next();
        concat_u16!(hi, lo)
    }
}

fn main() -> io::Result<()> {
    let program = include_bytes!("../../pacman/assets/pacman");

    let args: Vec<String> = env::args().collect();
    let path = args.get(1).cloned().unwrap_or(String::from("pacman.asm"));

    let mut file = File::create(&path)?;
    let mut disassembler = Disassembler::new(program);
    disassembler.disassemble(&mut file)?;

    println!("Disassembled to {}", path);
    Ok(())
}